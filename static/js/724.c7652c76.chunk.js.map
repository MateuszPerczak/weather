{"version":3,"file":"static/js/724.c7652c76.chunk.js","mappings":"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","sources":["Components/Card/Card.tsx","Components/CardHeader/CardHeader.tsx","Components/CardContent/CardContent.style.tsx","Components/CardContent/CardContent.tsx","Components/Input/Input.style.tsx","Components/Icon/Icon.tsx","Components/Input/Input.tsx","Components/Button/Button.style.tsx","Components/Button/Button.tsx","Cities/cities.ts","Components/InputCity/InputCity.tsx","Components/CityPicker/CityPicker.tsx","Components/DataContainer/DataContainer.tsx","Components/Data/Data.tsx","Components/Error/Error.tsx","Components/CityWeather/CityWeather.tsx","Pages/Main.tsx"],"sourcesContent":["import styled from \"@emotion/styled\";\r\nimport type CardComponent from \"./Card.types\";\r\n\r\nconst Card: CardComponent = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: center;\r\n  @media (max-width: 700px) {\r\n    flex-direction: column;\r\n    flex-wrap: wrap;\r\n  }\r\n  padding: 20px;\r\n  gap: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 25px 0\r\n    ${({ theme: { shadow } }) => {\r\n      return shadow;\r\n    }};\r\n  background-color: ${({ theme: { card } }) => {\r\n    return card;\r\n  }};\r\n`;\r\n\r\nexport default Card;\r\n","import styled from \"@emotion/styled\";\r\nimport type CardHeaderComponent from \"./CardHeader.types\";\r\n\r\nconst CardHeader: CardHeaderComponent = styled.div`\r\n  display: grid;\r\n  place-items: center;\r\n  gap: 20px;\r\n`;\r\n\r\nexport default CardHeader;\r\n","import styled from \"@emotion/styled\";\r\nimport type CardContentComponent from \"./CardContent.types\";\r\n\r\nconst StyledCardContent: CardContentComponent = styled.div<{\r\n  alignItems: string;\r\n}>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: ${({ alignItems }): string => alignItems};\r\n  justify-content: center;\r\n  gap: 10px;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nexport default StyledCardContent;\r\n","import type { FC, PropsWithChildren } from \"react\";\r\nimport StyledCardContent from \"./CardContent.style\";\r\n\r\ntype CardContentProps = PropsWithChildren<{\r\n  alignItems: string;\r\n}>;\r\n\r\nconst CardContent: FC<CardContentProps> = ({ children, alignItems }) => {\r\n  return (\r\n    <StyledCardContent alignItems={alignItems}>{children}</StyledCardContent>\r\n  );\r\n};\r\nexport default CardContent;\r\n","import styled from \"@emotion/styled\";\r\nimport type InputComponent from \"./Input.types\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst StyledInput: InputComponent = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  gap: 20px;\r\n  min-width: 150px;\r\n  padding: 10px 15px;\r\n  border-radius: 10px;\r\n  user-select: none;\r\n  transition: background-color 200ms;\r\n  background-color: ${({ theme: { input } }) => {\r\n    return input;\r\n  }};\r\n  &:active {\r\n    background-color: ${({ theme: { button } }) => {\r\n      return button;\r\n    }};\r\n  }\r\n`;\r\n\r\nexport const StyledInputList = styled(motion.div)`\r\n  position: absolute;\r\n  top: calc(100% + 10px);\r\n  left: 0;\r\n  z-index: 2;\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  border-radius: 10px;\r\n  user-select: none;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n  background-color: ${({ theme: { input } }) => {\r\n    return input;\r\n  }};\r\n  box-shadow: 0 0 20px 0\r\n    ${({ theme: { shadow } }) => {\r\n      return shadow;\r\n    }};\r\n`;\r\n\r\nexport default StyledInput;\r\n","import styled from \"@emotion/styled\";\r\nimport type IconComponent from \"./Icon.types\";\r\n\r\nconst Icon: IconComponent = styled.span`\r\n  font-family: \"Segoe Fluent Icons\", sans-serif;\r\n`;\r\n\r\nexport default Icon;\r\n","import type { FC } from \"react\";\r\nimport { useState } from \"react\";\r\nimport StyledInput, { StyledInputList } from \"./Input.style\";\r\nimport Icon from \"../Icon/Icon\";\r\nimport type { InputProps } from \"./Input.types\";\r\n\r\nconst Input: FC<InputProps> = ({ header, children }): JSX.Element => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  return (\r\n    <StyledInput onClick={() => setIsOpen(!isOpen)}>\r\n      <span>{header}</span>\r\n      <Icon>{isOpen ? \"\\uE010\" : \"\\uE011\"}</Icon>\r\n      <StyledInputList\r\n        initial={{ opacity: 0, height: 0 }}\r\n        animate={{ opacity: isOpen ? 1 : 0, height: isOpen ? 250 : 0 }}\r\n        transition={{ type: \"spring\", mass: 0.3, stiffness: 150, damping: 10 }}\r\n        onMouseLeave={() => setIsOpen(false)}\r\n      >\r\n        {isOpen && children}\r\n      </StyledInputList>\r\n    </StyledInput>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import styled from \"@emotion/styled\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst StyledButton = styled(motion.div)`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  gap: 10px;\r\n  padding: 10px 15px;\r\n  border-radius: 10px;\r\n  user-select: none;\r\n  transition: background-color 200ms;\r\n  background-color: ${({ theme: { input } }) => {\r\n    return input;\r\n  }};\r\n  &:active {\r\n    background-color: ${({ theme: { button } }) => {\r\n      return button;\r\n    }};\r\n  }\r\n`;\r\n\r\nexport default StyledButton;\r\n","import type { FC } from \"react\";\r\nimport type ButtonProps from \"./Button.types\";\r\nimport StyledButton from \"./Button.style\";\r\n\r\nconst Button: FC<ButtonProps> = ({ children, ...rest }): JSX.Element => {\r\n  return <StyledButton {...rest}>{children}</StyledButton>;\r\n};\r\n\r\nexport default Button;\r\n","const cities: string[] = [\r\n  \"Bydgoszcz\",\r\n  \"Chełm\",\r\n  \"Elbląg\",\r\n  \"Gdańsk\",\r\n  \"Katowice\",\r\n  \"Kołobrzeg\",\r\n  \"Kraków\",\r\n  \"Lublin\",\r\n  \"Łódź\",\r\n  \"Olsztyn\",\r\n  \"Opole\",\r\n  \"Poznań\",\r\n  \"Rybnik\",\r\n  \"Rzeszów\",\r\n  \"Sosnowiec\",\r\n  \"Starogard\",\r\n  \"Szczecin\",\r\n  \"Tarnowskie Góry\",\r\n  \"Tarnów\",\r\n  \"Toruń\",\r\n  \"Tychy\",\r\n  \"Warszawa\",\r\n  \"Wrocław\",\r\n  \"Zielona Góra\",\r\n];\r\n\r\nexport default cities;\r\n","import styled from \"@emotion/styled\";\r\nimport type InputCityComponent from \"./InputCity.types\";\r\n\r\nconst InputCity: InputCityComponent = styled.div`\r\n  padding: 10px 15px;\r\n  &:hover {\r\n    background-color: ${({ theme: { card } }) => {\r\n      return card;\r\n    }};\r\n  }\r\n`;\r\n\r\nexport default InputCity;\r\n","import type { FC } from \"react\";\r\nimport type CityPickerProps from \"./CityPicker.types\";\r\nimport { motion } from \"framer-motion\";\r\nimport Card from \"../Card/Card\";\r\nimport CardHeader from \"../CardHeader/CardHeader\";\r\nimport CardContent from \"../CardContent/CardContent\";\r\nimport Input from \"../Input/Input\";\r\nimport Button from \"../Button/Button\";\r\nimport Icon from \"../Icon/Icon\";\r\nimport Img from \"../Img/Img\";\r\nimport cities from \"../../Cities/cities\";\r\nimport InputCity from \"../InputCity/InputCity\";\r\n\r\nconst CityPicker: FC<CityPickerProps> = ({\r\n  city,\r\n  setCity,\r\n  setPicker,\r\n}: CityPickerProps): JSX.Element => {\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, scale: 0 }}\r\n      animate={{ opacity: 1, scale: 1 }}\r\n      exit={{ opacity: 0, scale: 0 }}\r\n    >\r\n      <Card>\r\n        <CardHeader>\r\n          <Img src=\"./images/Map.webp\" alt=\"Map\" />\r\n        </CardHeader>\r\n        <CardContent alignItems=\"flex-end\">\r\n          <Input header={city ? city : \"Choose a city\"}>\r\n            {cities.map((city, index) => {\r\n              return (\r\n                <InputCity onClick={() => setCity(city)} key={index}>\r\n                  {city}\r\n                </InputCity>\r\n              );\r\n            })}\r\n          </Input>\r\n          {city && (\r\n            <Button\r\n              initial={{ opacity: 0, scale: 0 }}\r\n              animate={{ opacity: 1, scale: 1 }}\r\n              onClick={() => setPicker(false)}\r\n            >\r\n              <span>Check weather</span>\r\n              <Icon>&#xE00F;</Icon>\r\n            </Button>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default CityPicker;\r\n","import styled from \"@emotion/styled\";\r\nimport type DataContainerComponent from \"./DataContainer.types\";\r\nimport type { DataContainerProps } from \"./DataContainer.types\";\r\n\r\nconst DataContainer: DataContainerComponent = styled.div<DataContainerProps>`\r\n  display: flex;\r\n  gap: 10px;\r\n  width: 100%;\r\n  align-items: flex-start;\r\n  flex-direction: ${({ flexDirection }) => flexDirection};\r\n  @media (max-width: 500px) {\r\n    flex-direction: column;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nexport default DataContainer;\r\n","import styled from \"@emotion/styled\";\r\nimport type DataComponent from \"./Data.types\";\r\n\r\nconst Data: DataComponent = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  font-size: 1.2rem;\r\n  padding: 10px 15px;\r\n  background-color: ${({ theme: { input } }) => input};\r\n  border-radius: 10px;\r\n`;\r\n\r\nexport default Data;\r\n","import type { FC } from \"react\";\r\nimport Card from \"../Card/Card\";\r\nimport CardContent from \"../CardContent/CardContent\";\r\nimport CardHeader from \"../CardHeader/CardHeader\";\r\nimport DataContainer from \"../DataContainer/DataContainer\";\r\nimport Turtel from \"../Weather/Weather\";\r\n\r\nconst Error: FC = (): JSX.Element => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <Turtel src=\"./images/Turtel.webp\" alt=\"Turtel\" />\r\n      </CardHeader>\r\n      <CardContent alignItems=\"flex-start\">\r\n        <DataContainer flexDirection=\"column\">\r\n          <h1>Error</h1>\r\n          <h3>Unable to get a response from the server</h3>\r\n        </DataContainer>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Error;\r\n","import type { FC } from \"react\";\r\nimport type CityWeatherProps from \"./CityWeather.types\";\r\nimport type { ApiResponse } from \"./CityWeather.types\";\r\nimport Loader from \"../Loader/Loader\";\r\nimport { useQuery } from \"react-query\";\r\nimport { motion } from \"framer-motion\";\r\nimport { capitalize } from \"lodash\";\r\nimport Card from \"../Card/Card\";\r\nimport CardHeader from \"../CardHeader/CardHeader\";\r\nimport CardContent from \"../CardContent/CardContent\";\r\nimport Img from \"../Img/Img\";\r\nimport DataContainer from \"../DataContainer/DataContainer\";\r\nimport Data from \"../Data/Data\";\r\nimport Error from \"../Error/Error\";\r\nimport Button from \"../Button/Button\";\r\nimport Icon from \"../Icon/Icon\";\r\nimport Weather from \"../Weather/Weather\";\r\n\r\nconst CityWeather: FC<CityWeatherProps> = ({\r\n  city,\r\n  setPicker,\r\n}): JSX.Element => {\r\n  const { isLoading, error, data } = useQuery<ApiResponse>([city], async () => {\r\n    const response = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=6967cc85728d1a5a59fa0fdd6086595e`\r\n    );\r\n    return await response.json();\r\n  });\r\n\r\n  if (error) {\r\n    return (\r\n      <motion.div\r\n        initial={{ opacity: 0, scale: 0 }}\r\n        animate={{ opacity: 1, scale: 1 }}\r\n        exit={{ opacity: 0, scale: 0 }}\r\n      >\r\n        <Error />\r\n      </motion.div>\r\n    );\r\n  }\r\n\r\n  if (isLoading) {\r\n    return <Loader />;\r\n  }\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, scale: 0 }}\r\n      animate={{ opacity: 1, scale: 1 }}\r\n      exit={{ opacity: 0, scale: 0 }}\r\n    >\r\n      <Card>\r\n        <CardHeader>\r\n          <Weather\r\n            src={`./images/${data ? data.weather[0].main : \"weather\"}.webp`}\r\n            alt={data ? data.weather[0].main : \"\"}\r\n          />\r\n        </CardHeader>\r\n        <CardContent alignItems=\"center\">\r\n          <DataContainer flexDirection=\"column\">\r\n            <h1>{city ? city : \"\"}</h1>\r\n            <h3>{data ? capitalize(data.weather[0].description) : \"\"}</h3>\r\n          </DataContainer>\r\n          <DataContainer flexDirection=\"row\">\r\n            <Data>\r\n              <Img src=\"./images/Thermometer.webp\" alt=\"Thermometer\" />\r\n              <span>\r\n                {data ? `${Math.floor(data.main.temp - 273.15)}°C` : \"\"}\r\n              </span>\r\n            </Data>\r\n            <Data>\r\n              <Img src=\"./images/Humidity.webp\" alt=\"Humidity\" />\r\n              <span>{data ? `${data.main.humidity}%` : \"\"}</span>\r\n            </Data>\r\n            <Data>\r\n              <Img src=\"./images/Windsock.webp\" alt=\"Windsock\" />\r\n              <span>{data ? `${data.wind.speed} Km/h` : \"\"}</span>\r\n            </Data>\r\n          </DataContainer>\r\n          <DataContainer flexDirection=\"row\">\r\n            <Button onClick={() => setPicker(true)}>\r\n              <Icon>&#xE00E;</Icon>\r\n              <span>Change city</span>\r\n            </Button>\r\n          </DataContainer>\r\n        </CardContent>\r\n      </Card>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default CityWeather;\r\n","import type { FC } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport CityPicker from \"../Components/CityPicker/CityPicker\";\r\nimport CityWeather from \"../Components/CityWeather/CityWeather\";\r\n\r\nconst Home: FC = (): JSX.Element => {\r\n  const [city, setCity] = useState(\"\");\r\n  const [picker, setPicker] = useState(true);\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, scale: \"0%\" }}\r\n      animate={{ opacity: 1, scale: \"100%\" }}\r\n    >\r\n      <AnimatePresence initial={false}>\r\n        {picker && (\r\n          <CityPicker city={city} setCity={setCity} setPicker={setPicker} />\r\n        )}\r\n        {!picker && city && <CityWeather city={city} setPicker={setPicker} />}\r\n      </AnimatePresence>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"names":["styled","theme","shadow","card","alignItems","children","StyledInput","input","button","StyledInputList","motion","header","useState","isOpen","setIsOpen","onClick","initial","opacity","height","animate","transition","type","mass","stiffness","damping","onMouseLeave","rest","city","setCity","setPicker","scale","exit","Img","src","alt","cities","index","flexDirection","useQuery","fetch","response","json","isLoading","error","data","Loader","Weather","weather","main","capitalize","description","Math","floor","temp","humidity","wind","speed","picker","AnimatePresence"],"sourceRoot":""}